import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

file_path = r"C:\Users\dhanu\PycharmProjects\PythonProject8\Ecommerce_Delivery_Analytics_New.csv"
data = pd.read_csv(file_path, encoding="utf-8")

data.columns = data.columns.str.strip().str.lower().str.replace(" ", "_")

print("Updated Columns in dataset:", data.columns)

print("\nMissing values in dataset:\n", data.isnull().sum())

# 1. Unique Orders and Highest Multiple Orders from Unique Users
if "customer_id" in data.columns and "order_id" in data.columns:
    unique_orders = data.groupby("customer_id")["order_id"].nunique()
    highest_multiple_orders = unique_orders[unique_orders > 10]
    print("\nTotal Unique Customers:", unique_orders.count())
    print("Customers with more than 10 orders:", highest_multiple_orders.count())
else:
    print("Error: 'customer_id' or 'order_id' column not found!")

# 2. Segregate Data and Visualize Unique Sales
if "platform" in data.columns:
    platform_sales = data.groupby("platform")["order_id"].nunique()
    plt.figure(figsize=(10, 5))
    sns.barplot(x=platform_sales.index, y=platform_sales.values)
    plt.title("Unique Sales per Platform")
    plt.xlabel("Platform")
    plt.ylabel("Unique Sales")
    plt.xticks(rotation=45)
    plt.show()
else:
    print("Error: 'platform' column not found!")

# 3. Yearly, Monthly, Weekly Analysis
if "order_date_&_time" in data.columns:
    data["order_date_&_time"] = pd.to_datetime(data["order_date_&_time"], errors="coerce")
    data["year"] = data["order_date_&_time"].dt.year
    data["month"] = data["order_date_&_time"].dt.month
    data["week"] = data["order_date_&_time"].dt.isocalendar().week

    yearly_orders = data.groupby("year")["order_id"].count()
    monthly_orders = data.groupby("month")["order_id"].count()
    weekly_orders = data.groupby("week")["order_id"].count()

    print("\nYearly Orders:\n", yearly_orders)
    print("\nMonthly Orders:\n", monthly_orders)
    print("\nWeekly Orders:\n", weekly_orders)
else:
    print("Error: 'order_date_&_time' column not found!")

# 4. Best & Least Performing E-commerce Platform
if "platform" in data.columns:
    best_performing = platform_sales.idxmax()
    least_performing = platform_sales.idxmin()
    print("\nBest Performing Platform:", best_performing)
    print("Least Performing Platform:", least_performing)

# 5 & 6. Top 10 Highest Rated and Lowest Rated Products
if "service_rating" in data.columns:
    top_rated = data.groupby("product_category")["service_rating"].mean().nlargest(10)
    lowest_rated = data.groupby("product_category")["service_rating"].mean().nsmallest(5)
    print("\nTop 10 Rated Product Categories:\n", top_rated)
    print("\nBottom 5 Rated Product Categories:\n", lowest_rated)
else:
    print("Error: 'service_rating' column not found!")

# 7. Profit Analysis (Check for missing discount & delivery charge columns)
if {"order_value_(inr)"}.issubset(data.columns):
    data["profit"] = data["order_value_(inr)"]  # No discount/delivery charges in dataset
    profit_per_platform = data.groupby("platform")["profit"].sum()
    print("\nProfit per Platform:\n", profit_per_platform)
else:
    print("Error: 'order_value_(inr)' column missing for profit calculation!")

# 8. Order Status Analysis (Assuming 'refund_requested' as order status)
if "refund_requested" in data.columns:
    status_counts = data["refund_requested"].value_counts(normalize=True) * 100
    print("\nOrder Status Analysis (Refund Requested %):\n", status_counts)
else:
    print("Error: 'refund_requested' column not found!")

# 9. Comments for Improvements
comments = {
    "Swiggy": "Improved delivery times needed based on high delays.",
    "Zomato": "Customer ratings suggest better quality assurance.",
    "Blinkit": "Strong performance in order completion but needs better pricing.",
    "Jiomart": "High cancellation rate, needs better inventory management.",
}
print("\nImprovement Comments:", comments)
